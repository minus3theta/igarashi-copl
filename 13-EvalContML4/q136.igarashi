def $e1 = letcc k in sm k;
def $e2 = fun f -> f 3 + f 4;
def $e3 = f 3 + f 4;
def $k1 = {|- let sm = _ in $e1};
def $v1 = ()[fun f -> $e3];
def $env1 = sm = $v1, k = [_];
def $k2 = {f = [_] |- _ + f 4};

|- let sm = fun f -> f 3 + f 4 in letcc k in sm k evalto 3 by E-Let {
  |- $e2 >> $k1 evalto 3 by E-Fun {
    $v1 => $k1 evalto 3 by C-LetBody {
      sm = $v1 |- $e1 evalto 3 by E-LetCc {
        $env1 |- sm k evalto 3 by E-App {
          $env1 |- sm >> {$env1 |- _ k} evalto 3 by E-Var {
            $v1 => {$env1 |- _ k} evalto 3 by C-EvalArg {
              $env1 |- k >> {$v1 _} evalto 3 by E-Var {
                [_] => {$v1 _} evalto 3 by C-EvalFun {
                  f = [_] |- $e3 evalto 3 by E-BinOp {
                    f = [_] |- f 3 >> $k2 evalto 3 by E-App {
                      f = [_] |- f >> {f = [_] |- _ 3} >> $k2 evalto 3 by E-Var {
                        [_] => {f = [_] |- _ 3} >> $k2 evalto 3 by C-EvalArg {
                          f = [_] |- 3 >> {[_] _} >> $k2 evalto 3 by E-Int {
                            3 => {[_] _} >> $k2 evalto 3 by C-EvalFunC {
                              3 => _ evalto 3 by C-Ret {}
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
