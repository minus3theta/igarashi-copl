def $e1 = if x < 0 then k1 x else k2 x;
def $e2 = fun x -> fun k1 -> fun k2 -> $e1;
def $e3 = letcc k1 in 2 + letcc k2 in f (-2) k1 k2;
def $k1 = {|- let f = _ in 1 + $e3};
def $v1 = ()[fun x -> fun k1 -> fun k2 -> $e1];
def $env1 = f = $v1;
def $env2 = $env1, k1 = [{1 + _}];
def $e4 = 2 + letcc k2 in f (-2) k1 k2;
def $e5 = letcc k2 in f (-2) k1 k2;
def $env3 = $env2, k2 = [{2 + _} >> {1 + _}];
def $k2 = {2 + _} >> {1 + _};
def $k3 = {$env3 |- _ k1} >> {$env3 |- _ k2} >> $k2;
def $v2 = (x = -2)[fun k1 -> fun k2 -> $e1];
def $env4 = x = -2, k1 = [{1 + _}];
def $env5 = $env4, k2 = [$k2];
def $k4 = {$env5 |- if _ then k1 x else k2 x} >> $k2;

|- let f = fun x -> fun k1 -> fun k2 ->
     if x < 0 then k1 x else k2 x in
   1 + (letcc k1 in 2 + letcc k2 in f (-2) k1 k2) evalto -1 by E-Let {
  |- $e2 >> $k1 evalto -1 by E-Fun {
    $v1 => $k1 evalto -1 by C-LetBody {
      f = $v1 |- 1 + $e3 evalto -1 by E-BinOp {
        $env1 |- 1 >> {$env1 |- _ + $e3} evalto -1 by E-Int {
          1 => {$env1 |- _ + $e3} evalto -1 by C-EvalR {
            $env1 |- $e3 >> {1 + _} evalto -1 by E-LetCc {
              $env2 |- $e4 >> {1 + _} evalto -1 by E-BinOp {
                $env2 |- 2 >> {$env2 |- _ + $e5} >> {1 + _} evalto -1 by E-Int {
                  2 => {$env2 |- _ + $e5} >> {1 + _} evalto -1 by C-EvalR {
                    $env2 |- $e5 >> {2 + _} >> {1 + _} evalto -1 by E-LetCc {
                      $env3 |- f (-2) k1 k2 >> {2 + _} >> {1 + _} evalto -1 by E-App {
                        $env3 |- f (-2) k1 >> {$env3 |- _ k2} >> $k2 evalto -1 by E-App {
                          $env3 |- f (-2) >> {$env3 |- _ k1} >> {$env3 |- _ k2} >> $k2 evalto -1 by E-App {
                            $env3 |- f >> {$env3 |- _ (-2)} >> {$env3 |- _ k1} >> {$env3 |- _ k2} >> $k2 evalto -1 by E-Var {
                              $v1 => {$env3 |- _ (-2)} >> {$env3 |- _ k1} >> {$env3 |- _ k2} >> $k2 evalto -1 by C-EvalArg {
                                $env3 |- -2 >> {$v1 _} >> {$env3 |- _ k1} >> {$env3 |- _ k2} >> $k2 evalto -1 by E-Int {
                                  -2 => {$v1 _} >> {$env3 |- _ k1} >> {$env3 |- _ k2} >> $k2 evalto -1 by C-EvalFun {
                                    x = -2 |- fun k1 -> fun k2 -> $e1 >> $k3 evalto -1 by E-Fun {
                                      $v2 => $k3 evalto -1 by C-EvalArg {
                                        $env3 |- k1 >> {$v2 _} >> {$env3 |- _ k2} >> $k2 evalto -1 by E-Var {
                                          [{1 + _}] => {$v2 _} >> {$env3 |- _ k2} >> $k2 evalto -1 by C-EvalFun {
                                            $env4 |- fun k2 -> $e1 >> {$env3 |- _ k2} >> $k2 evalto -1 by E-Fun {
                                              ($env4)[fun k2 -> $e1] => {$env3 |- _ k2} >> $k2 evalto -1 by C-EvalArg {
                                                $env3 |- k2 >> {($env4)[fun k2 -> $e1] _} >> $k2 evalto -1 by E-Var {
                                                  [$k2] => {($env4)[fun k2 -> $e1] _} >> $k2 evalto -1 by C-EvalFun {
                                                    $env4, k2 = [$k2] |- $e1 >> $k2 evalto -1 by E-If {
                                                      $env4, k2 = [$k2] |- x < 0 >> $k4 evalto -1 by E-BinOp {
                                                        $env5 |- x >> {$env5 |- _ < 0} >> $k4 evalto -1 by E-Var {
                                                          -2 => {$env5 |- _ < 0} >> $k4 evalto -1 by C-EvalR {
                                                            $env5 |- 0 >> {-2 < _} >> $k4 evalto -1 by E-Int {
                                                              0 => {-2 < _} >> $k4 evalto -1 by C-Lt {
                                                                -2 less than 0 is true by B-Lt {};
                                                                true => $k4 evalto -1 by C-IfT {
                                                                  $env5 |- k1 x >> $k2 evalto -1 by E-App {
                                                                    $env5 |- k1 >> {$env5 |- _ x} >> $k2 evalto -1 by E-Var {
                                                                      [{1 + _}] => {$env5 |- _ x} >> $k2 evalto -1 by C-EvalArg {
                                                                        $env5 |- x >> {[{1 + _}] _} >> $k2 evalto -1 by E-Var {
                                                                          -2 => {[{1 + _}] _} >> $k2 evalto -1 by C-EvalFunC {
                                                                            -2 => {1 + _} evalto -1 by C-Plus {
                                                                              1 plus -2 is -1 by B-Plus {};
                                                                              -1 => _ evalto -1 by C-Ret {}
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
